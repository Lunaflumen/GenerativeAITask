using .NET 6 and Bogus (https://github.com/bchavez/Bogus) perform synthetic data generation. 
Make sure to generate dependencies between generated datasets. Make sure to generate 100+ entries for each dataset. 
Store generated test data in separate files in CSV format. 
The generated test data represents an arbitrary dataset of movies, series, and credits related to them (one to many). 
The generated test data should consist of two relations with the next structure: 
Titles:
	titles.id - numeric title identifier 
	titles.title - textual movie (series) name 
	titles.description - textual title description 
	titles.release_year - should have a Common Era year format 
	titles.age_certification - should be one of these: G, PG, PG-13, R, NC-17, U, U/A, A, S, AL, 6, 9, 12, 12A, 15, 18, 18R, R18, R21, M, MA15+, R16, R18+, X18, T, E, E10+, EC, C, CA, GP, M/PG, TV-Y, TV-Y7, TV-G, TV-PG, TV-14, TV-MA 
	titles.runtime - should be a common title duration in minutes 
	titles.genres - should contain a list of strings representing various movie (series) genres 
	titles.production_country - should represent a country in ISO 3166-1 Alpha-3 code 
	titles.seasons - should represent the number of seasons for series or be empty for movies 

Credits:
	credits.id - numeric credits identifier 
	credits.title_id - corresponding title id 
	credits.real_name - full credits member name 
	credits.character_name - corresponding movie (series) character name 
	credits.role - should represent corresponding role and be one of these: Director, Producer, Screenwriter, Actor, Actress, Cinematographer, Film Editor, Production Designer, Costume Designer, Music Composer 

The generated test data should cover a wide range of scenarios, including positive, negative, and edge cases, to ensure comprehensive testing of the application's functionality. 
The test data should accurately represent the expected input and output data types, formats, and values, ensuring that it is suitable for validating the application's functionality. 
The test data should be diverse and include different combinations of inputs, ensuring that the application is tested against a variety of scenarios. 